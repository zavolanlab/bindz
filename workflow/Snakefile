##############################################################################
#
#   Snakemake pipeline:
#   Infer RBPs binding sites on a given RNA sequence
#   
#   AUTHOR: Maciej_Bak
#   AFFILIATION: University_of_Basel
#   AFFILIATION: Swiss_Institute_of_Bioinformatics
#   CONTACT: maciej.bak@unibas.ch
#   CREATED: 02-07-2020
#   LICENSE: Apache_2.0
#
##############################################################################

# imports
import sys
import os
import glob
import traceback

# local rules
localrules: all

def gather_motifs_names(pwm_dir):
    """
    Return the list of names of all PWM files in the PWM directory
    """
    regex = os.path.join(
        pwm_dir,
        "*"
    )
    l = [i.split("/")[-1] for i in glob.glob(regex)]
    return(l)

onstart:
    shell("mkdir -p " + config["outdir"])
    shell("mkdir -p " + config["outdir"] + "/local_log")
    shell("mkdir -p " + config["outdir"] + "/cluster_log")

rule all:
    """
    Target rule with final output of the pipeline
    """
    input:
        PDF_Heatmap_file = expand(
            os.path.join(
                "{outdir}",
                "ProbabilityVsSequence.pdf"
            ),
            outdir = config["outdir"]
        )

rule plot_sequence_logos:
    """
    Plot sequence logo for the motifs
    """
    input:
        FILE_pwm = os.path.abspath(
            os.path.join(
                config["pwm_directory"],
                "{pwm_dir}"
            )
        ),
        SCRIPT_ = os.path.join(
            config["pipeline_path"],
            "workflow",
            "scripts",
            "sequence_logos.py"
        )
            
    output:
        PNG_sequence_logos = os.path.join(
            "{outdir}",
            "sequence_logos",
            "{pwm_dir}.png"
        )

    params:
        DIR_sequence_logos = os.path.join(
            "{outdir}",
            "sequence_logos"
        ),
        LOG_cluster_log = os.path.join(
            "{outdir}",
            "cluster_log",
            "plot_sequence_logos.{pwm_dir}.log"
        )

    log:
        LOG_local_stdout = os.path.join(
            "{outdir}",
            "local_log",
            "plot_sequence_logos.{pwm_dir}.stdout.log"
        ),
        LOG_local_stderr = os.path.join(
            "{outdir}",
            "local_log",
            "plot_sequence_logos.{pwm_dir}.stderr.log"
        )

    benchmark:
        os.path.join(
            "{outdir}",
            "local_log",
            "plot_sequence_logos.{pwm_dir}.benchmark.log"
        )
    
    conda:
        "envs/plot_sequence_logos.yml"

    singularity:
        "docker://zavolab/pythonlogomaker:0.8"  

    shell:
        """
        python {input.SCRIPT_} \
        --input_file {input.FILE_pwm} \
        --output_location {params.DIR_sequence_logos} \
        1> {log.LOG_local_stdout} 2> {log.LOG_local_stderr}
        """

rule prepare_MotEvo_parameters:
    """
    Prepare text file with parameters for MotEvo runs
    """
    output:
        TXT_MotEvo_parameters = os.path.join(
            "{outdir}",
            "MotEvo_parameters.txt"
        )

    params:
        FLOAT_MotEvo_bg_binding_prior = \
            config["MotEvo_bg_binding_prior"],
        FLOAT_MotEvo_min_binding_posterior = \
            config["MotEvo_min_binding_posterior"],
        INT_MotEvo_Markov_chain_order = \
            config["MotEvo_Markov_chain_order"],
        LOG_cluster_log = os.path.join(
            "{outdir}",
            "cluster_log",
            "prepare_MotEvo_parameters.log"
        )

    log:
        LOG_local_stdout = os.path.join(
            "{outdir}",
            "local_log",
            "prepare_MotEvo_parameters.stdout.log"
        ),
        LOG_local_stderr = os.path.join(
            "{outdir}",
            "local_log",
            "prepare_MotEvo_parameters.stderr.log"
        )

    benchmark:
        os.path.join(
            "{outdir}",
            "local_log",
            "prepare_MotEvo_parameters.benchmark.log"
        )

    run:
        with open(output.TXT_MotEvo_parameters, "w") as ofile, open(log.LOG_local_stderr, "w") as logfile:
            try:
                # =================================
                bgprior = params.FLOAT_MotEvo_bg_binding_prior
                parampath = output.TXT_MotEvo_parameters
                genome_tag = "MOTEVO"
                markovorderbg = params.INT_MotEvo_Markov_chain_order
                bga = 0.25
                bgt = 0.25
                bgc = 0.25
                bgg = 0.25
                restrictparses = 0
                printsiteals = 1
                minposterior = params.FLOAT_MotEvo_min_binding_posterior
                # =================================
                tree = str('TREE (' + genome_tag + ':1);')
                with open(parampath, 'w') as paramfile:
                    paramfile.write(
                        'refspecies ' + genome_tag + os.linesep +
                        tree + os.linesep +
                        'Mode TFBS' + os.linesep +
                        'EMprior 0' + os.linesep +
                        'markovorderBG ' + str(markovorderbg) + os.linesep +
                        'bgprior ' + str(bgprior) + os.linesep +
                        'bg A ' + str(bga) + os.linesep +
                        'bg T ' + str(bgt) + os.linesep +
                        'bg G ' + str(bgg) + os.linesep +
                        'bg C ' + str(bgc) + os.linesep +
                        'restrictparses ' + str(restrictparses) + os.linesep +
                        'singlestrand 1' + os.linesep +
                        'sitefile posterior_sites' + os.linesep +
                        'priorfile posteriors' + os.linesep +
                        'printsiteals ' + str(printsiteals) + os.linesep +
                        'minposterior ' + str(minposterior) + os.linesep)
            except Exception:
                traceback.print_exc(file = logfile)
                raise Exception(
                    "Workflow error at rule: prepare_MotEvo_parameters"
                )

rule prepare_sequence_for_MotEvo:
    """
    Create a FASTA-formatted file with the input sequence
    """
    output:
        FASTA_MotEvo_input = os.path.join(
            "{outdir}",
            "sequence.fasta"
        ),

    params:
        STR_sequence = config["sequence"],
        STR_MotEvo_fasta_header_tag = ">>MOTEVO_input-sequence",
        LOG_cluster_log = os.path.join(
            "{outdir}",
            "cluster_log",
            "prepare_sequence_for_MotEvo.log"
        )

    log:
        # stdout is used by the echo command
        LOG_local_stderr = os.path.join(
            "{outdir}",
            "local_log",
            "prepare_sequence_for_MotEvo.stderr.log"
        )

    benchmark:
        os.path.join(
            "{outdir}",
            "local_log",
            "prepare_sequence_for_MotEvo.benchmark.log"
        )

    conda:
        "envs/bash.yml"

    singularity:
        "docker://bash:4.4.18"

    shell:
        """
        echo "{params.STR_MotEvo_fasta_header_tag}" \
        1> {output.FASTA_MotEvo_input} 2> {log.LOG_local_stderr} && \
        echo "{params.STR_sequence}" \
        1>> {output.FASTA_MotEvo_input} 2> {log.LOG_local_stderr} \
        """

rule run_MotEvo_analysis:
    """
    Run MotEvo for a given FASTA sequence and a given PWM
    """
    input:
        TXT_MotEvo_parameters = os.path.join(
            "{outdir}",
            "MotEvo_parameters.txt"
        ),
        DIR_pwm = os.path.abspath(
            os.path.join(
                config["pwm_directory"],
                "{pwm_dir}",
            )
        ),
        FASTA_MotEvo_input = os.path.join(
            "{outdir}",
            "sequence.fasta"
        )

    output:
        DIR_MotEvo_results_pwm = directory(
            os.path.join(
                "{outdir}",
                "motevo",
                "{pwm_dir}"
            )
        )

    params:
        TXT_MotEvo_parameters_abspath = os.path.abspath(
            os.path.join(
                "{outdir}",
                "MotEvo_parameters.txt",
            )
        ),
        FASTA_MotEvo_input_abspath = os.path.abspath(
            os.path.join(
                "{outdir}",
                "sequence.fasta",
            )
        ),
        LOG_cluster_log = os.path.join(
            "{outdir}",
            "cluster_log",
            "run_MotEvo_analysis.{pwm_dir}.log"
        )

    log:
        LOG_local_stdout = os.path.join(
            "{outdir}",
            "local_log",
            "run_MotEvo_analysis.{pwm_dir}.stdout.log"
        ),
        LOG_local_stderr = os.path.join(
            "{outdir}",
            "local_log",
            "run_MotEvo_analysis.{pwm_dir}.stderr.log"
        )

    benchmark:
        os.path.join(
            "{outdir}",
            "local_log",
            "run_MotEvo_analysis.{pwm_dir}.benchmark.log"
        )

    conda:
        "envs/motevo.yml"

    singularity:
        "docker://zavolab/motevo:1.12"

    shell:
        """
        (mkdir -p {output.DIR_MotEvo_results_pwm} && \
        cd {output.DIR_MotEvo_results_pwm} && \
        motevo \
        {params.FASTA_MotEvo_input_abspath} \
        {params.TXT_MotEvo_parameters_abspath} \
        {input.DIR_pwm}) \
        1> {log.LOG_local_stdout} 2> {log.LOG_local_stderr}
        """

rule combine_MotEvo_results:
    """
    Combine all motevo results into one tsv file
    """
    input: 
        DIR_MotEvo_results_pwm = expand(
            os.path.join(
                "{outdir}",
                "motevo",
                "{pwm_dir}"
            ),
            outdir = config["outdir"],
            pwm_dir = gather_motifs_names(config["pwm_directory"])
        ),
        SCRIPT_ = os.path.join(
            config["pipeline_path"],
            "workflow",
            "scripts",
            "combine-motevo-results.py"
        )

    output:
        TSV_combined_MotEvo_results = os.path.join(
            "{outdir}",
            "combined_MotEvo_results.tsv"
        )

    params:
        STR_binding_sites_filename = "posterior_sites",
        LOG_cluster_log = os.path.join(
            "{outdir}",
            "cluster_log",
            "combine_MotEvo_results.log"
        )

    log:
        LOG_local_stdout = os.path.join(
            "{outdir}",
            "local_log",
            "combine_MotEvo_results.stdout.log"
        ),
        LOG_local_stderr = os.path.join(
            "{outdir}",
            "local_log",
            "combine_MotEvo_results.stderr.log"
        )

    benchmark:
        os.path.join(
            "{outdir}",
            "local_log",
            "combine_MotEvo_results.benchmark.log"
        )

    conda:
        "envs/combine-motevo-results.yml"

    singularity:
        "docker://amancevice/pandas:1.0.1"

    shell: 
        """
        python {input.SCRIPT_} \
        --input_directories {input.DIR_MotEvo_results_pwm} \
        --filename {params.STR_binding_sites_filename} \
        --outfile {output.TSV_combined_MotEvo_results} \
        1> {log.LOG_local_stdout} 2> {log.LOG_local_stderr}
        """

rule plot_heatmap_of_MotEvo_results:
    """
    Plot heatmap from the combined_MotEvo_results.tsv file
    """
    input:
        TSV_combined_MotEvo_results = os.path.join(
            "{outdir}",
            "combined_MotEvo_results.tsv"
        ), 
        SCRIPT_ = os.path.join(
            config["pipeline_path"],
            "workflow",
            "scripts",
            "heatmap.r"
        ),
        PNG_sequence_logos = expand(
            os.path.join(
                "{outdir}",
                "sequence_logos",
                "{pwm_dir}.png"
            ),
            pwm_dir = gather_motifs_names(config["pwm_directory"]),
            outdir = config["outdir"]
        )
    output:
        PDF_Heatmap_file = os.path.join(
            "{outdir}",
            "ProbabilityVsSequence.pdf"
        )

    params:
        STRING_sequence = config["sequence"],
        DIR_sequence_logos = os.path.join(
            "{outdir}",
            "sequence_logos"
        ),
        LOG_cluster_log = os.path.join(
            "{outdir}",
            "cluster_log",
            "plot_heatmap_of_MotEvo_results.log"
        )

    log:
        LOG_local_stdout = os.path.join(
            "{outdir}",
            "local_log",
            "plot_heatmap_of_MotEvo_results.stdout.log"
        ),
        LOG_local_stderr = os.path.join(
            "{outdir}",
            "local_log",
            "plot_heatmap_of_MotEvo_results.stderr.log"
        )

    benchmark:
        os.path.join(
            "{outdir}",
            "local_log",
            "plot_heatmap_of_MotEvo_results.benchmark.log"
        )

    conda:
        "envs/plot_heatmap_of_MotEvo_results.yml"

    singularity:
        "docker://zavolab/r-zavolab:4.0.0"     

    shell: 
        """
        Rscript {input.SCRIPT_} \
        --input_tsv {input.TSV_combined_MotEvo_results} \
        --input_sequence {params.STRING_sequence} \
        --outfile {output.PDF_Heatmap_file} \
        --sequence_logos_directory {params.DIR_sequence_logos} \
        1> {log.LOG_local_stdout} 2> {log.LOG_local_stderr}
        """
